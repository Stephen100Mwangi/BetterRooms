import type Fetch from "../fetch";
import { BaseDiagramNode, Diagram, DiagramID, NodeID, SDiagram } from "../models";
import { Fields } from './base';
import CrudResource from './crud';
export declare const modelIDKey = "_id";
export declare type ModelIDKey = typeof modelIDKey;
declare class DiagramResource extends CrudResource<typeof SDiagram['schema'], ModelIDKey, DiagramResource, 'modified'> {
    private _nodePutAndPostStruct;
    private _nodePatchStruct;
    constructor(fetch: Fetch);
    get<T extends Partial<Diagram>>(id: DiagramID, fields: Fields): Promise<T>;
    get<T extends BaseDiagramNode = BaseDiagramNode>(id: DiagramID): Promise<Diagram<T>>;
    get<T extends Diagram<any> = Diagram>(id: DiagramID): Promise<T>;
    getRTC<T extends Diagram<any> = Diagram>(id: DiagramID): Promise<{
        diagram: T;
        timestamp: number;
    }>;
    create<T extends BaseDiagramNode = BaseDiagramNode>(body: Omit<Diagram<T>, '_id'> & Partial<Pick<Diagram<T>, '_id'>>): Promise<Diagram<T>>;
    create<T extends Omit<Diagram<any>, '_id'>>(body: T): Promise<T & Pick<Diagram<any>, '_id'>>;
    update<T extends BaseDiagramNode = BaseDiagramNode>(id: DiagramID, body: Partial<Diagram<T>>): Promise<Partial<Diagram<T>>>;
    update<T extends Partial<Diagram<any>>>(id: DiagramID, body: T): Promise<T>;
    updateNode<T extends Omit<BaseDiagramNode, 'nodeID'>>(id: DiagramID, nodeID: NodeID, body: T): Promise<T & Pick<BaseDiagramNode, 'nodeID'>>;
    patchNode<T extends Omit<BaseDiagramNode, 'nodeID'>>(id: DiagramID, nodeID: NodeID, body: Partial<T>): Promise<T & Pick<BaseDiagramNode, 'nodeID'>>;
    deleteNode(id: DiagramID, nodeID: NodeID): Promise<string>;
    delete(id: DiagramID): Promise<DiagramID>;
}
export default DiagramResource;
