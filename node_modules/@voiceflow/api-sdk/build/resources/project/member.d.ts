import Fetch, { PathVariables } from "../../fetch";
import { BasePlatformData, CreatorID, Member, ProjectID, SMember } from "../../models";
import BaseResource from '../base';
export declare const modelIDKey = "creatorID";
export declare type ModelIDKey = typeof modelIDKey;
declare class MemberResource extends BaseResource<typeof SMember['schema'], ModelIDKey, MemberResource> {
    constructor(fetch: Fetch);
    protected _getCRUDEndpoint(id: ProjectID): string;
    list<P extends Partial<Member<BasePlatformData>>>(projectID: ProjectID, fields: string[]): Promise<P[]>;
    list<P extends BasePlatformData>(projectID: ProjectID): Promise<Member<P>[]>;
    get<P extends Partial<Member<BasePlatformData>>>(projectID: ProjectID, fields: string[]): Promise<P>;
    get<P extends BasePlatformData>(projectID: ProjectID): Promise<Member<P>>;
    create<P extends BasePlatformData>(projectID: ProjectID, body: Omit<Member<P>, ModelIDKey>): Promise<Member<P>>;
    update<P extends BasePlatformData>(projectID: ProjectID, body: Omit<Member<P>, ModelIDKey>): Promise<Member<P>>;
    delete(projectID: ProjectID): Promise<CreatorID>;
    platformDataAdd<P>(projectID: ProjectID, path: string, value: P, pathVariables?: PathVariables): Promise<P>;
    platformDataUpdate<P>(projectID: ProjectID, path: string, value: P, pathVariables?: PathVariables): Promise<P>;
    platformDataRemove<P>(projectID: ProjectID, path: string, pathVariables?: PathVariables): Promise<P>;
}
export default MemberResource;
