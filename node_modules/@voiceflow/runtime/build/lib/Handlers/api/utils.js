"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAPICall = exports.getVariable = void 0;
const api_1 = require("@voiceflow/general-types/build/nodes/api");
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const lodash_1 = __importDefault(require("lodash"));
const querystring_1 = __importDefault(require("querystring"));
const stringToNumIfNumeric = (str) => {
    /* eslint-disable-next-line */
    if (lodash_1.default.isString(str) && !isNaN(str) && str.length < 16) {
        return Number(str);
    }
    return str;
};
exports.getVariable = (path, data) => {
    if (!path || typeof path !== 'string') {
        return undefined;
    }
    const props = path.split('.');
    let curData = { response: data };
    props.forEach((prop) => {
        const propsAndInds = prop.split('[');
        propsAndInds.forEach((propOrInd) => {
            if (propOrInd.indexOf(']') >= 0) {
                const indexStr = propOrInd.slice(0, -1);
                let index;
                if (indexStr.toLowerCase() === '{random}') {
                    index = Math.floor(Math.random() * curData.length);
                }
                else {
                    index = parseInt(indexStr, 10);
                }
                curData = curData ? curData[index] : undefined;
            }
            else {
                curData = curData ? curData[propOrInd] : undefined;
            }
        });
    });
    return stringToNumIfNumeric(curData);
};
const ReduceKeyValue = (values) => values.reduce((acc, { key, val }) => {
    if (key) {
        acc[key] = val;
    }
    return acc;
}, {});
const formatRequestConfig = (data) => {
    const { method, bodyInputType, headers, body, params, url, content } = data;
    const options = {
        method,
        url,
        timeout: 29000,
    };
    if ((params === null || params === void 0 ? void 0 : params.length) > 0) {
        const formattedParams = ReduceKeyValue(params);
        if (!lodash_1.default.isEmpty(formattedParams))
            options.params = formattedParams;
    }
    if (headers && headers.length > 0) {
        const formattedHeaders = ReduceKeyValue(headers);
        if (!lodash_1.default.isEmpty(formattedHeaders))
            options.headers = formattedHeaders;
    }
    if (!options.headers)
        options.headers = {};
    options.validateStatus = () => true;
    // do not parse body if GET request
    if (method === api_1.APIMethod.GET) {
        return options;
    }
    if (bodyInputType === api_1.APIBodyType.RAW_INPUT) {
        // attempt to convert into JSON
        try {
            options.data = JSON.parse(content);
        }
        catch (e) {
            options.data = data;
        }
    }
    else if (bodyInputType === api_1.APIBodyType.FORM_DATA) {
        const formData = new form_data_1.default();
        body.forEach((b) => {
            if (b.key) {
                formData.append(b.key, b.val);
            }
        });
        options.headers = Object.assign(Object.assign({}, options.headers), formData.getHeaders());
        options.data = formData;
    }
    else if (bodyInputType === api_1.APIBodyType.URL_ENCODED) {
        if (Array.isArray(body)) {
            options.data = querystring_1.default.stringify(ReduceKeyValue(body));
        }
        else {
            options.data = querystring_1.default.stringify(body);
        }
        options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    }
    else if (typeof body === 'string') {
        options.data = body;
    }
    else if (bodyInputType === 'keyValue' || Array.isArray(body)) {
        options.data = ReduceKeyValue(body);
    }
    return options;
};
exports.makeAPICall = async (nodeData) => {
    const requestConfig = formatRequestConfig(nodeData);
    const { data, headers, status } = await axios_1.default(requestConfig);
    if (lodash_1.default.isObject(data)) {
        data.VF_STATUS_CODE = status;
        data.VF_HEADERS = headers;
    }
    const newVariables = {};
    if (nodeData.mapping) {
        nodeData.mapping.forEach((m) => {
            if (m.var) {
                newVariables[m.var] = exports.getVariable(m.path, data);
            }
        });
    }
    return { variables: newVariables, response: { data, headers, status } };
};
//# sourceMappingURL=utils.js.map