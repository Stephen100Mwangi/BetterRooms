import * as s from 'superstruct';
import { UnknownRecord } from "../types";
export declare const SPlatform: s.Struct<string, any>;
export declare type Platform = s.StructType<typeof SPlatform>;
export declare const SName: s.Struct<string, any>;
export declare type Name = s.StructType<typeof SName>;
export declare const SAPIKeyID: s.Struct<string, any>;
export declare type APIKeyID = s.StructType<typeof SAPIKeyID>;
export declare const STeamID: s.Struct<string, any>;
export declare type TeamID = s.StructType<typeof STeamID>;
export declare const SWorkspaceID: s.Struct<string, any>;
export declare type WorkspaceID = TeamID;
export declare const SBlockID: s.Struct<string, any>;
export declare type BlockID = s.StructType<typeof SBlockID>;
export declare const SVariable: s.Struct<string, any>;
export declare type Variable = s.StructType<typeof SVariable>;
export declare const STimestamp: s.Struct<number, any>;
export declare type Timestamp = s.StructType<typeof STimestamp>;
export declare const SProjectID: s.Struct<string, any>;
export declare type ProjectID = s.StructType<typeof SProjectID>;
export declare const SCreatorID: s.Struct<number, any>;
export declare type CreatorID = s.StructType<typeof SCreatorID>;
export declare const SVersionID: s.Struct<string, any>;
export declare type VersionID = s.StructType<typeof SVersionID>;
export declare const SProgramID: s.Struct<string, any>;
export declare type ProgramID = s.StructType<typeof SProgramID>;
export declare const SDiagramID: s.Struct<string, any>;
export declare type DiagramID = s.StructType<typeof SDiagramID>;
export declare const SIntentInput: s.Struct<{
    text: string;
    slots?: string[] | undefined;
    voice?: string | undefined;
}, {
    text: s.Struct<string, any>;
    slots: s.Struct<string[] | undefined, any>;
    voice: s.Struct<string | undefined, any>;
}>;
export declare type IntentInput = s.StructType<typeof SIntentInput>;
export declare const SIntentSlotDialog: s.Struct<{
    prompt: {
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[];
    confirm: {
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[];
    utterances: {
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[];
    confirmEnabled: boolean;
}, {
    prompt: s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[], s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }, any>>;
    confirm: s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[], s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }, any>>;
    utterances: s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[], s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }, any>>;
    confirmEnabled: s.Struct<boolean, any>;
}>;
export declare type IntentSlotDialog = s.StructType<typeof SIntentSlotDialog>;
export declare const SIntentSlot: s.Struct<{
    required: boolean;
    dialog: {
        prompt: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        confirm: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        utterances: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        confirmEnabled: boolean;
    };
    id: string;
}, {
    id: s.Struct<string, any>;
    dialog: s.Struct<{
        prompt: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        confirm: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        utterances: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        confirmEnabled: boolean;
    }, {
        prompt: s.Struct<{
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[], s.Struct<{
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }, any>>;
        confirm: s.Struct<{
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[], s.Struct<{
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }, any>>;
        utterances: s.Struct<{
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[], s.Struct<{
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }, any>>;
        confirmEnabled: s.Struct<boolean, any>;
    }>;
    required: s.Struct<boolean, any>;
}>;
export declare type IntentSlot = s.StructType<typeof SIntentSlot>;
export declare const SIntent: s.Struct<{
    key: string;
    name: string;
    inputs: {
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[];
    slots?: {
        required: boolean;
        dialog: {
            prompt: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            confirm: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            utterances: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            confirmEnabled: boolean;
        };
        id: string;
    }[] | undefined;
    builtIn?: boolean | undefined;
}, {
    key: s.Struct<string, any>;
    name: s.Struct<string, any>;
    slots: s.Struct<{
        required: boolean;
        dialog: {
            prompt: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            confirm: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            utterances: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            confirmEnabled: boolean;
        };
        id: string;
    }[] | undefined, any>;
    inputs: s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }[], s.Struct<{
        text: string;
        slots?: string[] | undefined;
        voice?: string | undefined;
    }, any>>;
    builtIn: s.Struct<boolean | undefined, any>;
}>;
export declare type Intent = s.StructType<typeof SIntent>;
export declare const SSlot: s.Struct<{
    type: {
        value?: string | undefined;
    };
    key: string;
    name: string;
    inputs: string[];
    color?: string | undefined;
}, {
    key: s.Struct<string, any>;
    name: s.Struct<string, any>;
    type: s.Struct<{
        value?: string | undefined;
    }, {
        value: s.Struct<string | undefined, any>;
    }>;
    color: s.Struct<string | undefined, any>;
    inputs: s.Struct<string[], s.Struct<string, any>>;
}>;
export declare type Slot = s.StructType<typeof SSlot>;
export declare const SSlotMapping: s.Struct<{
    slot: string | null;
    variable: string | null;
}, {
    slot: s.Struct<string | null, any>;
    variable: s.Struct<string | null, any>;
}>;
export declare type SlotMapping = s.StructType<typeof SSlotMapping>;
export declare const SCommandMapping: s.Struct<{
    slot: string;
    variable: string;
}, {
    slot: s.Struct<string, any>;
    variable: s.Struct<string, any>;
}>;
export declare type CommandMapping = s.StructType<typeof SCommandMapping>;
export declare const SCommand: s.Struct<Record<string, any> & {
    type: string;
}, {
    type: s.Struct<string, any>;
}>;
export declare type Command<T extends string = string, D extends UnknownRecord = UnknownRecord> = {
    type: T;
} & D;
export declare const SNodeID: s.Struct<string, any>;
export declare type NodeID = s.StructType<typeof SNodeID>;
export declare const SNodeType: s.Struct<string, any>;
export declare type NodeType = s.StructType<typeof SNodeID>;
export declare const SNode: s.Struct<Record<string, any> & {
    type: string;
    id: string;
}, {
    id: s.Struct<string, any>;
    type: s.Struct<string, any>;
}>;
export declare type Node<T extends string = string, D extends UnknownRecord = UnknownRecord> = {
    id: string;
    type: T;
} & D;
export declare const SCoordPoint: s.Struct<number, any>;
export declare type CoordPoint = s.StructType<typeof SCoordPoint>;
export declare const SDiagramNode: s.Struct<{
    data: Record<string, unknown>;
    type: string;
    nodeID: string;
    coords?: [number, number] | undefined;
}, {
    nodeID: s.Struct<string, any>;
    type: s.Struct<string, any>;
    coords: s.Struct<[number, number] | undefined, any>;
    data: s.Struct<Record<string, unknown>, any>;
}>;
export declare type DiagramNode<T extends string = string, D extends UnknownRecord = UnknownRecord> = Omit<s.StructType<typeof SDiagramNode>, 'data' | 'type'> & {
    type: T;
    data: D;
};
export declare type Block<T extends string = string, D extends UnknownRecord = UnknownRecord> = DiagramNode<T, D & {
    name: string;
    color: string;
    steps: string[];
}> & {
    coords: [number, number];
};
export declare type Port<PD extends UnknownRecord = UnknownRecord> = {
    type: string;
    target: string | null;
    data?: PD;
    id: string;
};
export declare type Step<T extends string = string, D extends UnknownRecord = UnknownRecord, P = [Port, ...Port[]]> = DiagramNode<T, D & {
    ports: P;
}>;
export declare const SBasePlatformData: s.Struct<Record<string, unknown>, any>;
export declare type BasePlatformData = s.StructType<typeof SBasePlatformData>;
export declare const SPrototypeModel: s.Struct<{
    slots: {
        type: {
            value?: string | undefined;
        };
        key: string;
        name: string;
        inputs: string[];
        color?: string | undefined;
    }[];
    intents: {
        key: string;
        name: string;
        inputs: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        slots?: {
            required: boolean;
            dialog: {
                prompt: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirm: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                utterances: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirmEnabled: boolean;
            };
            id: string;
        }[] | undefined;
        builtIn?: boolean | undefined;
    }[];
}, {
    slots: s.Struct<{
        type: {
            value?: string | undefined;
        };
        key: string;
        name: string;
        inputs: string[];
        color?: string | undefined;
    }[], s.Struct<{
        type: {
            value?: string | undefined;
        };
        key: string;
        name: string;
        inputs: string[];
        color?: string | undefined;
    }, any>>;
    intents: s.Struct<{
        key: string;
        name: string;
        inputs: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        slots?: {
            required: boolean;
            dialog: {
                prompt: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirm: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                utterances: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirmEnabled: boolean;
            };
            id: string;
        }[] | undefined;
        builtIn?: boolean | undefined;
    }[], s.Struct<{
        key: string;
        name: string;
        inputs: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        slots?: {
            required: boolean;
            dialog: {
                prompt: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirm: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                utterances: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirmEnabled: boolean;
            };
            id: string;
        }[] | undefined;
        builtIn?: boolean | undefined;
    }, any>>;
}>;
export declare type PrototypeModel = s.StructType<typeof SPrototypeModel>;
