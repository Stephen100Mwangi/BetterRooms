"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class Fetch {
    constructor({ options, clientKey, apiEndpoint, authorization }) {
        const config = {
            baseURL: apiEndpoint.endsWith('/') ? apiEndpoint : `${apiEndpoint}/`,
            headers: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.headers), { clientKey }), (authorization ? { authorization } : {})),
            withCredentials: true,
        };
        this.axios = axios_1.default.create(config);
    }
    async get(url) {
        const { data, status } = await this.axios.get(url);
        return { data, status };
    }
    async post(url, body) {
        const { data, status } = await this.axios.post(url, body);
        return { data, status };
    }
    async put(url, body) {
        const { data, status } = await this.axios.put(url, body);
        return { data, status };
    }
    async patch(url, body, query) {
        const { data, status } = await this.axios.patch(url, body, query ? { params: query } : undefined);
        return { data, status };
    }
    async delete(url) {
        const { data, status } = await this.axios.delete(url);
        return { data, status };
    }
    /**
     * Updates the data by the provided path and value, variables can be used in the path
     * @example
     * // return Promise<number>
     * fetch.granularPatch<number>('/endpoint', 'vendors[$vendorID].skillID', 5678, { vendorID: "234" })
     */
    async granularPatch(url, path, value, pathVariables) {
        const { data, status } = await this.axios.patch(url, { path, value, pathVariables });
        return { data, status };
    }
    setOptions({ headers }) {
        const _a = this.axios.defaults.headers, { clientKey, authorization } = _a, defaultHeaders = __rest(_a, ["clientKey", "authorization"]);
        this.axios.defaults.headers = Object.assign(Object.assign(Object.assign({}, defaultHeaders), headers), { clientKey,
            authorization });
    }
    initWithOptions({ headers }) {
        const _a = this.axios.defaults.headers, { clientKey, authorization } = _a, defaultHeaders = __rest(_a, ["clientKey", "authorization"]);
        return new Fetch({
            options: { headers: Object.assign(Object.assign({}, defaultHeaders), headers) },
            clientKey,
            apiEndpoint: this.axios.defaults.baseURL,
            authorization,
        });
    }
}
exports.default = Fetch;
//# sourceMappingURL=fetch.js.map