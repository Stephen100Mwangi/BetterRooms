import type Fetch from "../fetch";
import { Command, Node, Program, ProgramID, SProgram } from "../models";
import CrudResource from './crud';
export declare const modelIDKey = "id";
export declare type ModelIDKey = typeof modelIDKey;
declare class ProgramResource extends CrudResource<typeof SProgram['schema'], ModelIDKey, ProgramResource> {
    constructor(fetch: Fetch, { resourceEndpoint }?: {
        resourceEndpoint?: string;
    });
    get<T extends Partial<Program>>(id: ProgramID, fields: string[]): Promise<T>;
    get<T extends Node, C extends Command>(id: ProgramID): Promise<Program<Node, C>>;
    create<T extends Node, C extends Command>(body: Omit<Program<T, C>, ModelIDKey>): Promise<Program<T, C>>;
    update<T extends Node, C extends Command>(id: ProgramID, body: Omit<Program<T, C>, ModelIDKey>): Promise<Omit<Program<T, C>, ModelIDKey>>;
    delete(id: ProgramID): Promise<ProgramID>;
}
export default ProgramResource;
