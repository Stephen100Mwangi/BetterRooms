import Handler from "../Handler";
import Lifecycle, { AbstractLifecycle, Event, EventType } from "../Lifecycle";
import { DataAPI } from '../DataAPI';
import Stack, { FrameState } from './Stack';
import Store, { State as StorageState } from './Store';
import Trace from './Trace';
export interface Options<DA extends DataAPI = DataAPI> {
    api: DA;
    handlers?: Handler[];
    services?: Record<string, any>;
}
export interface State {
    turn?: StorageState;
    stack: FrameState[];
    storage: StorageState;
    variables: StorageState;
}
export declare enum Action {
    IDLE = 0,
    REQUEST = 1,
    RESPONSE = 2,
    END = 3
}
declare class Runtime<R extends any = any, DA extends DataAPI = DataAPI> extends AbstractLifecycle {
    versionID: string;
    private request;
    turn: Store;
    stack: Stack;
    storage: Store;
    variables: Store;
    trace: Trace;
    services: Record<string, any>;
    api: DA;
    private action;
    private handlers;
    private programManager;
    constructor(versionID: string, state: State, request: R | null, { services, handlers, api }: Options<DA>, events: Lifecycle);
    getRequest(): R | null;
    setAction(type: Action): void;
    getAction(): Action;
    end(): void;
    hasEnded(): boolean;
    callEvent<K extends EventType>(type: K, event: Event<K>): Promise<void>;
    getProgram(programID: string): Promise<import("../Program").ProgramModel>;
    update(): Promise<void>;
    getFinalState(): State;
    getRawState(): State;
    getHandlers(): Handler[];
    getVersionID(): string;
}
export default Runtime;
