import type Fetch from "../fetch";
import { BaseCommand, BaseNode, Program, ProgramID, SProgram } from "../models";
import { Fields } from './base';
import CrudResource from './crud';
export declare const modelIDKey = "id";
export declare type ModelIDKey = typeof modelIDKey;
declare class ProgramResource extends CrudResource<typeof SProgram['schema'], ModelIDKey, ProgramResource> {
    constructor(fetch: Fetch, { resourceEndpoint }?: {
        resourceEndpoint?: string;
    });
    get<T extends Partial<Program>>(id: ProgramID, fields: Fields): Promise<T>;
    get<T extends BaseNode, C extends BaseCommand>(id: ProgramID): Promise<Program<T, C>>;
    get<T extends Program<any, any> = Program>(id: ProgramID): Promise<T>;
    create<T extends BaseNode, C extends BaseCommand>(body: Omit<Program<T, C>, ModelIDKey>): Promise<Program<T, C>>;
    create<T extends Omit<Program<any, any>, ModelIDKey>>(body: T): Promise<T & Pick<Program<any, any>, ModelIDKey>>;
    update<T extends BaseNode, C extends BaseCommand>(id: ProgramID, body: Omit<Program<T, C>, ModelIDKey>): Promise<Omit<Program<T, C>, ModelIDKey>>;
    update<T extends Omit<Program<any, any>, ModelIDKey>>(id: ProgramID, body: T): Promise<T>;
    delete(id: ProgramID): Promise<ProgramID>;
}
export default ProgramResource;
