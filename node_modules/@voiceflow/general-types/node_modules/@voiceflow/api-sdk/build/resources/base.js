"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const s = __importStar(require("superstruct"));
const utils_1 = require("../utils");
const fetcher_1 = __importDefault(require("./fetcher"));
class BaseResource extends fetcher_1.default {
    constructor(_a) {
        var { schema, modelIDKey, postPutExcludedFields = [] } = _a, options = __rest(_a, ["schema", "modelIDKey", "postPutExcludedFields"]);
        super(options);
        this.modelIDKey = modelIDKey;
        this.struct = s.object(schema);
        this.patchStruct = s.partial(schema);
        this.putAndPostStruct = utils_1.createPutAndPostStruct(schema, modelIDKey, postPutExcludedFields);
    }
    // eslint-disable-next-line class-methods-use-this
    _getFieldsQuery(fields) {
        return fields ? `?fields=${fields.join(',')}` : '';
    }
    _assertModelID(id) {
        s.assert(id, this.struct.schema[this.modelIDKey]);
    }
    _assertPatchBody(body) {
        s.assert(body, this.patchStruct);
    }
    _assertPutAndPostBody(body) {
        s.assert(body, this.putAndPostStruct);
    }
}
exports.default = BaseResource;
//# sourceMappingURL=base.js.map