import type Fetch from "../fetch";
import type { BaseSchema, PutPostSchemeType, SchemeType } from "../types";
declare class BaseResource<S extends BaseSchema, K extends keyof SchemeType<S>, C extends Record<string, any>, E extends keyof SchemeType<S> = never> {
    protected readonly fetch: Fetch;
    private readonly clazz;
    private readonly modelIDKey;
    private readonly struct;
    private readonly patchStruct;
    private readonly putAndPostStruct;
    private readonly resourceEndpoint;
    constructor({ fetch, clazz, schema, modelIDKey, resourceEndpoint, postPutExcludedFields, }: {
        fetch: Fetch;
        clazz: new (fetch: Fetch) => C;
        schema: S;
        modelIDKey: K;
        resourceEndpoint: string;
        postPutExcludedFields?: E[];
    });
    protected _getEndpoint(): string;
    protected _getFieldsQuery(fields?: string[]): string;
    protected _assertModelID(id: string | number | SchemeType<S>[K]): void;
    protected _assertPatchBody(body: Partial<SchemeType<S>>): void;
    protected _assertPutAndPostBody(body: PutPostSchemeType<S, K, E>): void;
    options(options: Parameters<Fetch['initWithOptions']>[0]): C;
}
export default BaseResource;
