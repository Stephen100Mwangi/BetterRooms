"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _alg, _key;
Object.defineProperty(exports, "__esModule", { value: true });
const enc_utf8_1 = __importDefault(require("crypto-js/enc-utf8"));
class Synchronous {
    constructor({ alg, key }) {
        _alg.set(this, void 0);
        _key.set(this, void 0);
        __classPrivateFieldSet(this, _alg, alg);
        __classPrivateFieldSet(this, _key, key);
    }
    getKey() {
        return __classPrivateFieldGet(this, _key);
    }
    encrypt(data, key = __classPrivateFieldGet(this, _key)) {
        return __classPrivateFieldGet(this, _alg).encrypt(data, key).toString();
    }
    encryptJSON(data) {
        return this.encrypt(JSON.stringify(data));
    }
    decrypt(data, key = __classPrivateFieldGet(this, _key)) {
        return __classPrivateFieldGet(this, _alg).decrypt(data, key).toString(enc_utf8_1.default);
    }
    decryptJSON(data) {
        return JSON.parse(this.decrypt(data));
    }
}
_alg = new WeakMap(), _key = new WeakMap();
exports.default = Synchronous;
//# sourceMappingURL=synchronous.js.map