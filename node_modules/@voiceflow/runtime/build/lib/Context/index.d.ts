import { Context, ContextHandler, InitContextHandler, PartialContext } from './types';
export { Context, ContextHandle, ContextHandler, InitContextHandler, PartialContext } from './types';
export declare class ContextBuilder<C extends Context<any, any, any>> {
    private pipes;
    addHandlers(...handlers: ContextHandler<C>[]): this;
    handle(_request: C): Promise<C>;
}
export declare class TurnBuilder<C extends Context<any, any, any>> extends ContextBuilder<C> {
    private init;
    constructor(init: InitContextHandler<C>);
    handle(_request: PartialContext<C>): Promise<C>;
    resolve(_request: PartialContext<C>): Promise<{
        request: any;
        state: Pick<import("../Runtime").State, "storage" | "variables" | "stack" | "turn">;
        trace: any[] | undefined;
    }>;
}
