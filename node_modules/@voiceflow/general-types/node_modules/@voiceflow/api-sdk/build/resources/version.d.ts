import * as s from 'superstruct';
import Fetch from "../fetch";
import { BasePlatformData, Diagram, Program, Project, SVersion, Version, VersionDiagramResponce, VersionID, VersionPlatformData, VersionPrototype } from "../models";
import { Fields } from './base';
import CrudResource from './crud';
export declare const ENDPOINT = "versions";
export declare type ModelKey = '_id';
declare class VersionResource extends CrudResource<typeof SVersion['schema'], ModelKey, VersionResource, 'creatorID'> {
    _partialPlatformData: s.Struct<{
        slots?: {
            key: string;
            name: string;
            inputs: string[];
            type: {
                value?: string | undefined;
            };
            color?: string | undefined;
        }[] | undefined;
        intents?: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                id: string;
                dialog: {
                    prompt: unknown[];
                    confirm: unknown[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                required: boolean;
            }[] | undefined;
            builtIn?: boolean | undefined;
            _platform?: string | undefined;
        }[] | undefined;
        settings?: Record<string, unknown> | undefined;
        publishing?: Record<string, unknown> | undefined;
    }, any>;
    constructor(fetch: Fetch);
    get<T extends Partial<Version<VersionPlatformData>>>(id: VersionID, fields: Fields): Promise<T>;
    get<P extends VersionPlatformData>(id: VersionID): Promise<Version<P>>;
    get<T extends Version<any, any, string> = Version<VersionPlatformData>>(id: VersionID): Promise<T>;
    create<P extends VersionPlatformData>(body: Omit<Version<P>, ModelKey | 'creatorID'>): Promise<Version<P>>;
    create<P extends Omit<Version<any, any, string>, ModelKey | 'creatorID'>>(body: P): Promise<P & Pick<Version<any, any, string>, ModelKey | 'creatorID'>>;
    update<P extends VersionPlatformData>(id: VersionID, body: Partial<Version<P>>): Promise<Partial<Version<P>>>;
    update<P extends Partial<Version<any, any, string>>>(id: VersionID, body: P): Promise<P>;
    delete(id: VersionID): Promise<VersionID>;
    updatePlatformData<P extends Partial<VersionPlatformData>>(id: VersionID, body: P): Promise<P>;
    updatePlatformDataSettings<P extends Partial<VersionPlatformData['settings']>>(id: VersionID, body: P): Promise<P>;
    updatePlatformDataPublishing<P extends Partial<VersionPlatformData['publishing']>>(id: VersionID, body: P): Promise<P>;
    getPrograms<T extends Partial<Program>>(id: VersionID, fields: Fields): Promise<T[]>;
    getPrograms<T extends Program<any> = Program>(id: VersionID): Promise<T[]>;
    getPrototypePrograms<T extends Partial<Program>>(id: VersionID, fields: Fields): Promise<T[]>;
    getPrototypePrograms<T extends Program<any> = Program>(id: VersionID): Promise<T[]>;
    getDiagrams<T extends Partial<Diagram>>(id: VersionID, fields: Fields): Promise<T[]>;
    getDiagrams<T extends Diagram<any> = Diagram>(id: VersionID): Promise<T[]>;
    export<P extends Project<any, any> = Project<BasePlatformData, BasePlatformData>, V extends Version<any> = Version<VersionPlatformData>, D extends Diagram = Diagram, PM extends Program = Program>(id: VersionID, options: {
        programs: true;
    }): Promise<{
        project: P;
        version: V;
        diagrams: Record<string, D>;
        programs: Record<string, PM>;
    }>;
    export<P extends Project<any, any> = Project<BasePlatformData, BasePlatformData>, V extends Version<any> = Version<VersionPlatformData>, D extends Diagram = Diagram>(id: VersionID, options?: {
        programs?: boolean;
    }): Promise<{
        project: P;
        version: V;
        diagrams: Record<string, D>;
    }>;
    exportResponses(id: VersionID): Promise<VersionDiagramResponce[]>;
    import<P extends Project<any, any> = Project<BasePlatformData, BasePlatformData>>(workspaceID: string, data: {
        project: P;
        version: Version<any>;
        diagrams: Record<string, Diagram<any>>;
    }): Promise<P>;
    getPrototype<T extends VersionPrototype>(id: VersionID, body?: {
        isPublic?: boolean;
    }): Promise<T>;
    updatePrototype<P extends Partial<P>>(id: VersionID, body: P): Promise<P>;
    updatePrototypeSettings<P extends Partial<VersionPrototype['settings']>>(id: VersionID, body: P): Promise<P>;
    checkPrototypeSharedLogin(id: VersionID, body: {
        password: string;
    }): Promise<{
        versionID: string;
    }>;
    getPrototypePlan(id: VersionID): Promise<{
        plan: string;
    }>;
}
export default VersionResource;
