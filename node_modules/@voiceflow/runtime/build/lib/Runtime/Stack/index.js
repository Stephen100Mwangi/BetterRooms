"use strict";
/* eslint-disable no-unused-expressions */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Frame = void 0;
const immer_1 = __importDefault(require("immer"));
const Frame_1 = __importDefault(require("./Frame"));
exports.Frame = Frame_1.default;
class Stack {
    constructor(stack = [], handlers) {
        this.handlers = handlers;
        this.frames = [];
        this.frames = Stack.getFrames(stack);
    }
    static getFrames(stack) {
        return [...stack.map((frameState) => new Frame_1.default(frameState))];
    }
    getState() {
        return this.frames.map((frame) => frame.getState());
    }
    getSize() {
        return this.frames.length;
    }
    get(index) {
        return this.frames[index];
    }
    top() {
        return this.frames[this.frames.length - 1];
    }
    updateFrames(nextFrames) {
        var _a, _b, _c, _d;
        (_b = (_a = this.handlers) === null || _a === void 0 ? void 0 : _a.willChange) === null || _b === void 0 ? void 0 : _b.call(_a, { nextFrames });
        const prevFrames = this.frames;
        this.frames = nextFrames;
        (_d = (_c = this.handlers) === null || _c === void 0 ? void 0 : _c.didChange) === null || _d === void 0 ? void 0 : _d.call(_c, { prevFrames });
    }
    pop() {
        let frame;
        const nextFrames = immer_1.default(this.frames, (draft) => {
            frame = draft.pop();
        });
        this.updateFrames(nextFrames);
        return frame;
    }
    // pops all frames until index
    popTo(index) {
        this.updateFrames(this.frames.slice(0, index));
    }
    lift(depth = 1) {
        this.updateFrames(this.frames.slice(0, this.frames.length - depth));
    }
    push(frame) {
        this.updateFrames((this.frames = [...this.frames, frame]));
    }
    update(frames) {
        this.updateFrames(Stack.getFrames(frames));
    }
    getFrames() {
        return this.frames;
    }
    isEmpty() {
        return this.getSize() === 0;
    }
    flush() {
        this.updateFrames([]);
    }
}
exports.default = Stack;
//# sourceMappingURL=index.js.map