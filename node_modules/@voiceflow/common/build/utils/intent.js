"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSlotType = exports.getUtterancesWithSlotNames = exports.formatIntentName = void 0;
const constants_1 = require("../constants");
exports.formatIntentName = (name) => {
    if (!name) {
        return name;
    }
    let formattedName = '';
    // replace white spaces with underscores
    formattedName = name.replace(constants_1.SPACE_REGEXP, '_');
    // replace numbers with equivalent capital letter. Ex: 0 = A, 1 = B
    formattedName = formattedName.replace(/\d/g, (digit) => String.fromCharCode(parseInt(digit, 10) + 65));
    return formattedName;
};
exports.getUtterancesWithSlotNames = ({ slots = [], utterances = [], }) => utterances
    .filter((utterance) => { var _a; return !!((_a = utterance.text) === null || _a === void 0 ? void 0 : _a.trim()); })
    .map(({ text }) => text.replace(constants_1.SLOT_REGEXP, (substring, _name, key) => {
    const slot = slots.find((_slot) => _slot.key === key);
    return (slot === null || slot === void 0 ? void 0 : slot.name) ? `{${slot.name}}` : substring;
}));
exports.getSlotType = (slots, slot) => {
    var _a, _b;
    let type = slot.name;
    const lowerCaseType = (_b = (_a = slot.type.value) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : '';
    if (!!slot.type.value && lowerCaseType !== constants_1.LOWER_CASE_CUSTOM_SLOT_TYPE) {
        const builtinSlot = slots.find((_slot) => _slot.label.toLowerCase() === lowerCaseType);
        if (!builtinSlot) {
            type = slot.type.value; // Platform specific slot
        }
        else {
            ({ type } = builtinSlot);
        }
    }
    return type;
};
//# sourceMappingURL=intent.js.map