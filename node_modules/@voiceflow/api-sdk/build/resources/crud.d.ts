import type { BaseSchema, PutPostType, SchemeType } from "../types";
import BaseResource from './base';
declare class CrudResource<S extends BaseSchema, K extends keyof SchemeType<S>, C extends Record<string, any>, E extends keyof SchemeType<S> = never> extends BaseResource<S, K, C, E> {
    protected _getCRUDEndpoint(id?: SchemeType<S>[K]): string;
    protected _get<T extends Partial<SchemeType<S>>>(fields: string[]): Promise<T[]>;
    protected _get<T extends SchemeType<S>>(): Promise<T[]>;
    protected _getByID<T extends Partial<SchemeType<S>>>(id: SchemeType<S>[K], fields: string[]): Promise<T>;
    protected _getByID<T extends SchemeType<S>>(id: SchemeType<S>[K]): Promise<T>;
    protected _post<T extends SchemeType<S>>(body: PutPostType<T, K, E>): Promise<T>;
    protected _put<T extends SchemeType<S>>(id: SchemeType<S>[K], body: PutPostType<T, K, E>): Promise<T>;
    protected _patch<T extends SchemeType<S>>(id: SchemeType<S>[K], body: Partial<T>): Promise<Partial<T>>;
    protected _delete(id: SchemeType<S>[K]): Promise<SchemeType<S>[K]>;
}
export default CrudResource;
