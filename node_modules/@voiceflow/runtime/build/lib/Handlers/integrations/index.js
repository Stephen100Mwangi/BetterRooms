"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@voiceflow/common");
const general_types_1 = require("@voiceflow/general-types");
const axios_1 = __importDefault(require("axios"));
const lodash_1 = __importDefault(require("lodash"));
const safe_json_stringify_1 = __importDefault(require("safe-json-stringify"));
const utils_1 = require("./utils");
const VALID_INTEGRATIONS = [general_types_1.IntegrationType.ZAPIER, general_types_1.IntegrationType.GOOGLE_SHEETS];
const IntegrationsHandler = ({ integrationsEndpoint }) => ({
    canHandle: (node) => node.type === general_types_1.NodeType.INTEGRATIONS && VALID_INTEGRATIONS.includes(node.selected_integration),
    handle: async (node, runtime, variables) => {
        var _a, _b, _c, _d;
        if (!node.selected_integration || !node.selected_action) {
            runtime.trace.debug('no integration or action specified - fail by default');
            return (_a = node.fail_id) !== null && _a !== void 0 ? _a : null;
        }
        let nextId = null;
        try {
            const { selected_action: selectedAction, selected_integration: selectedIntegration } = node;
            const actionBodyData = common_1.deepVariableSubstitution(lodash_1.default.cloneDeep(node.action_data), variables.getState());
            const { data } = await axios_1.default.post(`${integrationsEndpoint}${utils_1.ENDPOINTS_MAP[selectedIntegration][selectedAction]}`, actionBodyData);
            // map result data to variables
            const mappedVariables = utils_1.resultMappings(node, data);
            // add mapped variables to variables store
            variables.merge(mappedVariables);
            runtime.trace.debug(`action **${node.selected_action}** for integration **${node.selected_integration}** successfully triggered`);
            nextId = (_b = node.success_id) !== null && _b !== void 0 ? _b : null;
        }
        catch (error) {
            runtime.trace.debug(`action **${node.selected_action}** for integration **${node.selected_integration}** failed  \n${safe_json_stringify_1.default((_c = error.response) === null || _c === void 0 ? void 0 : _c.data)}`);
            nextId = (_d = node.fail_id) !== null && _d !== void 0 ? _d : null;
        }
        return nextId;
    },
});
exports.default = IntegrationsHandler;
//# sourceMappingURL=index.js.map