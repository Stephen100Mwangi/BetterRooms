"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelIDKey = void 0;
const s = __importStar(require("superstruct"));
const models_1 = require("../../models");
const base_1 = __importDefault(require("../base"));
const constants_1 = require("./constants");
exports.modelIDKey = 'creatorID';
class MemberResource extends base_1.default {
    constructor(fetch) {
        super({
            fetch,
            clazz: MemberResource,
            schema: models_1.SMember.schema,
            modelIDKey: exports.modelIDKey,
            resourceEndpoint: constants_1.ENDPOINT,
        });
    }
    _getCRUDEndpoint(id) {
        return `${this._getEndpoint()}/${id}/members`;
    }
    async list(projectID, fields) {
        s.assert(projectID, models_1.SProjectID);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(projectID)}${this._getFieldsQuery(fields)}`);
        return data;
    }
    async get(projectID, fields) {
        s.assert(projectID, models_1.SProjectID);
        const { data } = await this.fetch.get(`${this._getEndpoint()}/${projectID}/member${this._getFieldsQuery(fields)}`);
        return data;
    }
    async create(projectID, body) {
        s.assert(projectID, models_1.SProjectID);
        this._assertPutAndPostBody(body);
        const { data } = await this.fetch.post(this._getCRUDEndpoint(projectID), body);
        return data;
    }
    async update(projectID, body) {
        s.assert(projectID, models_1.SProjectID);
        this._assertPutAndPostBody(body);
        const { data } = await this.fetch.put(this._getCRUDEndpoint(projectID), body);
        return data;
    }
    async delete(projectID) {
        s.assert(projectID, models_1.SProjectID);
        const { data } = await this.fetch.delete(this._getCRUDEndpoint(projectID));
        return data;
    }
    async platformDataAdd(projectID, path, value, pathVariables) {
        s.assert(projectID, models_1.SProjectID);
        const { data } = await this.fetch.granularPatch(`${this._getCRUDEndpoint(projectID)}/platform-data/add`, path, value, pathVariables);
        return data;
    }
    async platformDataUpdate(projectID, path, value, pathVariables) {
        s.assert(projectID, models_1.SProjectID);
        const { data } = await this.fetch.granularPatch(`${this._getCRUDEndpoint(projectID)}/platform-data/update`, path, value, pathVariables);
        return data;
    }
    async platformDataRemove(projectID, path, pathVariables) {
        s.assert(projectID, models_1.SProjectID);
        const { data } = await this.fetch.granularPatch(`${this._getCRUDEndpoint(projectID)}/platform-data/remove`, path, undefined, pathVariables);
        return data;
    }
}
exports.default = MemberResource;
//# sourceMappingURL=member.js.map