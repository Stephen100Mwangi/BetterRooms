"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPrototypeModel = exports.SBasePlatformData = exports.SDiagramNode = exports.SCoordPoint = exports.SNode = exports.SNodeType = exports.SNodeID = exports.SCommand = exports.SCommandMapping = exports.SSlotMapping = exports.SSlot = exports.SIntent = exports.SIntentSlot = exports.SIntentSlotDialog = exports.SIntentInput = exports.SDiagramID = exports.SProgramID = exports.SVersionID = exports.SCreatorID = exports.SProjectID = exports.STimestamp = exports.SVariable = exports.SBlockID = exports.SWorkspaceID = exports.STeamID = exports.SAPIKeyID = exports.SName = exports.SPlatform = void 0;
const s = __importStar(require("superstruct"));
const utils_1 = require("../utils");
exports.SPlatform = s.string();
exports.SName = s.string();
exports.SAPIKeyID = s.string();
exports.STeamID = s.string();
// alias for the team id
exports.SWorkspaceID = exports.STeamID;
exports.SBlockID = s.string();
exports.SVariable = s.string();
exports.STimestamp = s.number();
exports.SProjectID = s.string();
exports.SCreatorID = s.number();
exports.SVersionID = s.string();
exports.SProgramID = s.string();
exports.SDiagramID = s.string();
exports.SIntentInput = s.object({
    text: s.string(),
    slots: s.optional(s.array(s.string())),
    voice: s.optional(s.string()),
});
exports.SIntentSlotDialog = s.object({
    prompt: s.array(exports.SIntentInput),
    confirm: s.array(exports.SIntentInput),
    utterances: s.array(exports.SIntentInput),
    confirmEnabled: s.boolean(),
});
exports.SIntentSlot = s.object({
    id: s.string(),
    dialog: exports.SIntentSlotDialog,
    required: s.boolean(),
});
exports.SIntent = s.object({
    key: s.string(),
    name: s.string(),
    slots: s.optional(s.array(exports.SIntentSlot)),
    inputs: s.array(exports.SIntentInput),
    builtIn: s.optional(s.boolean()),
});
exports.SSlot = s.object({
    key: s.string(),
    name: s.string(),
    type: s.object({ value: s.optional(s.string()) }),
    color: s.optional(s.string()),
    inputs: s.array(s.string()),
});
exports.SSlotMapping = s.object({
    slot: s.nullable(s.string()),
    variable: s.nullable(exports.SVariable),
});
exports.SCommandMapping = s.object({
    slot: s.string(),
    variable: exports.SVariable,
});
exports.SCommand = utils_1.dynamicObject({
    type: s.string(),
});
exports.SNodeID = s.string();
exports.SNodeType = s.string();
exports.SNode = utils_1.dynamicObject({ id: exports.SNodeID, type: exports.SNodeType });
exports.SCoordPoint = s.number();
exports.SDiagramNode = s.object({
    nodeID: exports.SNodeID,
    type: exports.SNodeType,
    coords: s.optional(s.tuple([s.number(), s.number()])),
    data: s.object(),
});
exports.SBasePlatformData = s.object();
exports.SPrototypeModel = s.object({
    slots: s.array(exports.SSlot),
    intents: s.array(exports.SIntent),
});
//# sourceMappingURL=shared.js.map