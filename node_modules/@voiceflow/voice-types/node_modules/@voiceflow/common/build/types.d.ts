export declare type Nullable<T> = T | null;
export declare type Nullish<T> = Nullable<T> | undefined;
export declare type Function<A extends any[] = any[], R = any> = (...args: A) => R;
export declare type AnyFunction = Function<any[], any>;
export declare type Callback = Function<[], Eventual<void>>;
export declare type Eventual<T> = Promise<T> | T;
export declare type StringifyEnum<T extends string> = T | `${T}`;
export declare type NormalizedValue<T> = T extends Normalized<infer R> ? R : never;
export interface Normalized<T> {
    byKey: Record<string, T>;
    allKeys: string[];
}
export declare type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export declare type WithRequired<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;
export declare type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare type NullableRecord<T extends object> = {
    [K in keyof T]: Nullable<T[K]>;
};
export declare type NonNullishRecord<T extends object> = Required<{
    [K in keyof T]: Exclude<T[K], null>;
}>;
export declare type Struct = Record<string, unknown>;
/**
 * An object with no keys or values.
 * @see https://github.com/typescript-eslint/typescript-eslint/issues/2063#issuecomment-675156492
 */
export declare type EmptyObject = Record<never, never>;
