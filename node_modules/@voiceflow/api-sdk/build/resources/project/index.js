"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelIDKey = void 0;
const s = __importStar(require("superstruct"));
const models_1 = require("../../models");
const crud_1 = __importDefault(require("../crud"));
const constants_1 = require("./constants");
const member_1 = __importDefault(require("./member"));
exports.modelIDKey = '_id';
class ProjectResource extends crud_1.default {
    constructor(fetch) {
        super({
            fetch,
            clazz: ProjectResource,
            schema: models_1.SProject.schema,
            modelIDKey: exports.modelIDKey,
            resourceEndpoint: constants_1.ENDPOINT,
            postPutExcludedFields: ['creatorID'],
        });
        this.member = new member_1.default(fetch);
    }
    async list(workspaceID, fields) {
        s.assert(workspaceID, models_1.SWorkspaceID);
        const { data } = await this.fetch.get(`workspaces/${workspaceID}/projects${this._getFieldsQuery(fields)}`);
        return data;
    }
    async get(id, fields) {
        return fields ? super._getByID(id, fields) : super._getByID(id);
    }
    async create(body) {
        return super._post(body);
    }
    async update(id, body) {
        return super._patch(id, body);
    }
    async delete(id) {
        return super._delete(id);
    }
    async updatePlatformData(id, body) {
        this._assertModelID(id);
        s.assert(body, models_1.SProject.schema.platformData);
        const { data } = await this.fetch.patch(`${this._getCRUDEndpoint(id)}/platform`, body);
        return data;
    }
    async getVersions(id, fields) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/versions${this._getFieldsQuery(fields)}`);
        return data;
    }
    async getPrototype(id) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/prototype`);
        return data;
    }
}
exports.default = ProjectResource;
//# sourceMappingURL=index.js.map