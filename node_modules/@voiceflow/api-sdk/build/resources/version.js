"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENDPOINT = void 0;
const s = __importStar(require("superstruct"));
const models_1 = require("../models");
const crud_1 = __importDefault(require("./crud"));
exports.ENDPOINT = 'versions';
class VersionResource extends crud_1.default {
    constructor(fetch) {
        super({
            fetch,
            clazz: VersionResource,
            schema: models_1.SVersion.schema,
            modelIDKey: '_id',
            resourceEndpoint: exports.ENDPOINT,
            postPutExcludedFields: ['creatorID'],
        });
        this._partialPlatformData = s.partial(models_1.SVersion.schema.platformData);
    }
    async get(id, fields) {
        return fields ? super._getByID(id, fields) : super._getByID(id);
    }
    async create(body) {
        return super._post(body);
    }
    async update(id, body) {
        return super._patch(id, body);
    }
    async delete(id) {
        return super._delete(id);
    }
    async updatePlatformData(id, body) {
        this._assertModelID(id);
        const { data } = await this.fetch.patch(`${this._getCRUDEndpoint(id)}/platform`, body);
        return data;
    }
    async updatePlatformDataSettings(id, body) {
        this._assertModelID(id);
        s.assert(body, models_1.SVersion.schema.platformData.schema.settings);
        const { data } = await this.fetch.patch(`${this._getCRUDEndpoint(id)}/platform`, body, { path: 'settings' });
        return data;
    }
    async updatePlatformDataPublishing(id, body) {
        this._assertModelID(id);
        s.assert(body, models_1.SVersion.schema.platformData.schema.publishing);
        const { data } = await this.fetch.patch(`${this._getCRUDEndpoint(id)}/platform`, body, { path: 'publishing' });
        return data;
    }
    async getPrograms(id, fields) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/programs${this._getFieldsQuery(fields)}`);
        return data;
    }
    async getPrototypePrograms(id, fields) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/prototype-programs${this._getFieldsQuery(fields)}`);
        return data;
    }
    async getDiagrams(id, fields) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/diagrams${this._getFieldsQuery(fields)}`);
        return data;
    }
    async export(id, options) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/export${(options === null || options === void 0 ? void 0 : options.programs) ? '?programs=1' : ''}`);
        return data;
    }
    async import(workspaceID, data) {
        const { data: newProject } = await this.fetch.post(`${this._getCRUDEndpoint()}/import`, { workspaceID, data });
        return newProject;
    }
    async getPrototype(id, body = {}) {
        this._assertModelID(id);
        const query = body.isPublic ? `?isPublic=${body.isPublic}` : '';
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/prototype${query}`);
        return data;
    }
    async updatePrototype(id, body) {
        this._assertModelID(id);
        const { data } = await this.fetch.patch(`${this._getCRUDEndpoint(id)}/prototype`, body);
        return data;
    }
    async updatePrototypeSettings(id, body) {
        this._assertModelID(id);
        s.assert(body, models_1.SVersion.schema.prototype.schema.settings);
        const { data } = await this.fetch.patch(`${this._getCRUDEndpoint(id)}/prototype`, body, { path: 'settings' });
        return data;
    }
    async checkPrototypeSharedLogin(id, body) {
        this._assertModelID(id);
        const { data } = await this.fetch.put(`${this._getCRUDEndpoint(id)}/prototype/share/login`, body);
        return data;
    }
    async getPrototypePlan(id) {
        this._assertModelID(id);
        const { data } = await this.fetch.get(`${this._getCRUDEndpoint(id)}/prototype/plan`);
        return data;
    }
}
exports.default = VersionResource;
//# sourceMappingURL=version.js.map