"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWindow = exports.createPutAndPostStruct = exports.dynamicObject = void 0;
const s = __importStar(require("superstruct"));
exports.dynamicObject = (schema) => {
    const Struct = s.object(schema);
    Struct.validator = function* validator(value, ctx) {
        const knowns = Object.keys(Struct.schema);
        if (typeof value !== 'object' || value == null) {
            yield ctx.fail();
        }
        else {
            // eslint-disable-next-line no-restricted-syntax
            for (const key of knowns) {
                const Value = Struct.schema[key];
                const v = value[key];
                yield* ctx.check(v, Value, value, key);
            }
        }
    };
    return Struct;
};
exports.createPutAndPostStruct = (schema, idKey, excludedKeys, isDynamic) => {
    const createScheme = Object.keys(schema)
        .filter((key) => key !== idKey && !excludedKeys.includes(key))
        .reduce((acc, key) => Object.assign(acc, { [key]: schema[key] }), {});
    return isDynamic
        ? exports.dynamicObject(Object.assign(Object.assign({}, createScheme), { [idKey]: s.optional(schema[idKey]) }))
        : s.object(Object.assign(Object.assign({}, createScheme), { [idKey]: s.optional(schema[idKey]) }));
};
exports.getWindow = () => {
    return typeof window === 'undefined' ? null : window;
};
//# sourceMappingURL=utils.js.map