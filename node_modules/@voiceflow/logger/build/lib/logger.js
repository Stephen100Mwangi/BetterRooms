"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pino_1 = __importDefault(require("@voiceflow/pino"));
const pino_pretty_1 = __importDefault(require("@voiceflow/pino-pretty"));
const util_1 = __importDefault(require("util"));
const __1 = require("..");
const constants_1 = require("./constants");
const createMiddleware_1 = __importDefault(require("./createMiddleware"));
const createTraced_1 = __importDefault(require("./createTraced"));
const utils_1 = require("./utils");
class Logger {
    constructor(config = constants_1.defaultConfigs) {
        const cfg = Object.assign(constants_1.defaultConfigs, config);
        const options = {
            base: null,
            level: cfg.level || __1.LogLevel.ERROR,
            serializers: { err: utils_1.errorSerializer },
        };
        if (cfg === null || cfg === void 0 ? void 0 : cfg.pretty) {
            options.prettifier = pino_pretty_1.default;
            options.prettyPrint = { levelFirst: true, translateTime: true };
        }
        if (cfg.withTraceID) {
            const traced = createTraced_1.default({ options, verbosity: cfg.middlewareVerbosity });
            this.logger = traced.logger;
            this.middleware = traced.middleware;
        }
        else {
            this.logger = pino_1.default(options);
            this.middleware = createMiddleware_1.default({ logger: this.logger, verbosity: cfg.middlewareVerbosity });
        }
    }
    trace(message) {
        this.logger.trace(message);
    }
    debug(message) {
        this.logger.debug(message);
    }
    info(message) {
        this.logger.info(message);
    }
    warn(message) {
        this.logger.warn(message);
    }
    error(message) {
        this.logger.error(message);
    }
    fatal(message) {
        this.logger.fatal(message);
    }
    logMiddleware() {
        return this.middleware;
    }
    /**
     * Format an object of variables into a string.
     *
     * @example
     * ```js
     * logger.vars({ a: 1, b: 2, c: 3 }); // '| a=1 b=2 c=3'
     * ```
     */
    vars(variables, prefix = '| ') {
        return (prefix +
            Object.entries(variables)
                .map(([key, value]) => {
                const serializedValue = value !== null && typeof value === 'object' ? util_1.default.inspect(value) : value;
                return `${key}=${serializedValue}`;
            })
                .join(', '));
    }
}
exports.default = Logger;
//# sourceMappingURL=logger.js.map