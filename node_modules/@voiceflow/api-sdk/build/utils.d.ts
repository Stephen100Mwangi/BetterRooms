import * as s from 'superstruct';
import type { PutPostStruct, SchemeType } from "./types";
export declare const dynamicObject: <S extends Record<string, s.Struct<any, any>>>(schema: S) => s.Struct<Record<string, any> & import("./types").Flatten<{ [K_1 in import("./types").RequiredKeys<{ [K in keyof S]: s.StructType<S[K]>; }>]: { [K in keyof S]: s.StructType<S[K]>; }[K_1]; } & { [K_2 in import("./types").OptionalKeys<{ [K in keyof S]: s.StructType<S[K]>; }>]?: { [K in keyof S]: s.StructType<S[K]>; }[K_2] | undefined; }>, S>;
export declare const createPutAndPostStruct: <S extends Record<string, s.Struct<any, any>>, K_3 extends keyof import("./types").Flatten<{ [K_1 in import("./types").RequiredKeys<{ [K in keyof S]: s.StructType<S[K]>; }>]: { [K in keyof S]: s.StructType<S[K]>; }[K_1]; } & { [K_2 in import("./types").OptionalKeys<{ [K in keyof S]: s.StructType<S[K]>; }>]?: { [K in keyof S]: s.StructType<S[K]>; }[K_2] | undefined; }>, E extends keyof import("./types").Flatten<{ [K_1 in import("./types").RequiredKeys<{ [K in keyof S]: s.StructType<S[K]>; }>]: { [K in keyof S]: s.StructType<S[K]>; }[K_1]; } & { [K_2 in import("./types").OptionalKeys<{ [K in keyof S]: s.StructType<S[K]>; }>]?: { [K in keyof S]: s.StructType<S[K]>; }[K_2] | undefined; }> = never>(schema: S, idKey: K_3, excludedKeys: E[], isDynamic?: boolean | undefined) => PutPostStruct<S, K_3, E>;
export declare const getWindow: () => (Window & typeof globalThis) | null;
