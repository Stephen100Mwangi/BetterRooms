"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const lodash_1 = __importDefault(require("lodash"));
const safe_json_stringify_1 = __importDefault(require("safe-json-stringify"));
const utils_1 = require("./utils");
const CodeHandler = ({ endpoint, callbacks, safe } = {}) => ({
    canHandle: (node) => !!node.code,
    handle: async (node, runtime, variables) => {
        var _a, _b, _c;
        try {
            const variablesState = variables.getState();
            const reqData = {
                code: node.code,
                variables: variablesState,
            };
            const data = endpoint ? (await axios_1.default.post(endpoint, reqData)).data : utils_1.vmExecute(reqData, safe, callbacks);
            // debugging changes find variable value differences
            const changes = lodash_1.default.union(Object.keys(variablesState), Object.keys(data)).reduce((acc, variable) => {
                var _a, _b, _c, _d;
                if (variablesState[variable] !== data[variable]) {
                    acc += `\`{${variable}}\`: \`${(_b = (_a = variablesState[variable]) === null || _a === void 0 ? void 0 : _a.toString) === null || _b === void 0 ? void 0 : _b.call(_a)}\` => \`${(_d = (_c = data[variable]) === null || _c === void 0 ? void 0 : _c.toString) === null || _d === void 0 ? void 0 : _d.call(_c)}\`  \n`;
                }
                return acc;
            }, '');
            runtime.trace.debug(`evaluating code - ${changes ? `changes:  \n${changes}` : 'no variable changes'}`);
            variables.merge(data);
            return (_a = node.success_id) !== null && _a !== void 0 ? _a : null;
        }
        catch (error) {
            runtime.trace.debug(`unable to resolve code  \n\`${safe_json_stringify_1.default(((_b = error.response) === null || _b === void 0 ? void 0 : _b.data) || error.toString())}\``);
            return (_c = node.fail_id) !== null && _c !== void 0 ? _c : null;
        }
    },
});
exports.default = CodeHandler;
//# sourceMappingURL=index.js.map