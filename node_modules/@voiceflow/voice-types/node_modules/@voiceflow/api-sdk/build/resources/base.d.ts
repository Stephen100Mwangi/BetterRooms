import type { BaseSchema, PutPostSchemeType, SchemeType } from "../types";
import Fetcher, { FetcherOptions } from './fetcher';
export declare type Fields = string[] | ReadonlyArray<string>;
export interface BaseResourceOptions<S extends BaseSchema, K extends keyof SchemeType<S>, C extends Record<string, any>, E extends keyof SchemeType<S> = never> extends FetcherOptions<C> {
    schema: S;
    modelIDKey: K;
    postPutExcludedFields?: E[];
}
declare class BaseResource<S extends BaseSchema, K extends keyof SchemeType<S>, C extends Record<string, any>, E extends keyof SchemeType<S> = never> extends Fetcher<C> {
    private readonly modelIDKey;
    private readonly struct;
    private readonly patchStruct;
    private readonly putAndPostStruct;
    constructor({ schema, modelIDKey, postPutExcludedFields, ...options }: BaseResourceOptions<S, K, C, E>);
    protected _getFieldsQuery(fields?: Fields): string;
    protected _assertModelID(id: string | number | SchemeType<S>[K]): void;
    protected _assertPatchBody(body: Partial<SchemeType<S>>): void;
    protected _assertPutAndPostBody(body: PutPostSchemeType<S, K, E>): void;
}
export default BaseResource;
