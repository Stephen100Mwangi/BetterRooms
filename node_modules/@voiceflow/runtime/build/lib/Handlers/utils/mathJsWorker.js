"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mathjs_1 = require("mathjs");
const workerpool_1 = __importDefault(require("workerpool"));
const math = mathjs_1.create(mathjs_1.all, {});
const limitedEvaluate = math.evaluate;
math.import({
    // disable possible vulnerable functions
    import: () => {
        throw new Error('Function import is disabled');
    },
    createUnit: () => {
        throw new Error('Function createUnit is disabled');
    },
    evaluate: () => {
        throw new Error('Function evaluate is disabled');
    },
    parse: () => {
        throw new Error('Function parse is disabled');
    },
    simplify: () => {
        throw new Error('Function simplify is disabled');
    },
    derivative: () => {
        throw new Error('Function derivative is disabled');
    },
    // end of security fix
    // override native methods
    add: (x, y) => x + y,
    subtract: (x, y) => x - y,
    multiply: (x, y) => x * y,
    divide: (x, y) => x / y,
    equal: (x, y) => x == y,
    or: (x, y) => x || y,
    and: (x, y) => x && y,
    not: (x) => !x,
    pow: (x, y) => x ** y,
    compare: (x, y) => {
        // eslint-disable-next-line eqeqeq
        if (x == y) {
            return 0;
        }
        if (x > y) {
            return 1;
        }
        return -1;
    },
}, { override: true });
const evaluate = (expressions, variables) => {
    try {
        return limitedEvaluate(expressions, variables).pop();
    }
    catch (e) {
        return `__ERROR__:${e.message}`;
    }
};
// create a worker and register public functions
workerpool_1.default.worker({
    evaluate,
});
//# sourceMappingURL=mathJsWorker.js.map