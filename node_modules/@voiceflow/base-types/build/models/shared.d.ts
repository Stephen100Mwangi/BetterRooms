import { AnyRecord, Nullable } from './utils';
export declare type Platform = string;
export declare type Name = string;
export declare type APIKeyID = string;
export declare type TeamID = string;
export declare type WorkspaceID = TeamID;
export declare type BlockID = string;
export declare type Variable = string;
export declare type TagID = string;
export declare type Timestamp = number;
export declare type ProjectID = string;
export declare type CreatorID = number;
export declare type VersionID = string;
export declare type ProgramID = string;
export declare type DiagramID = string;
export interface IntentInput {
    text: string;
    slots?: string[];
    /** @deprecated shouldn't be used */
    voice?: string;
}
export declare type IntentSlotDialog = {
    prompt: any[];
    confirm: any[];
    utterances: IntentInput[];
    confirmEnabled: boolean;
};
export declare type IntentSlot = {
    id: string;
    dialog: IntentSlotDialog;
    required: boolean;
};
export declare type Intent = {
    key: string;
    name: string;
    slots?: IntentSlot[];
    inputs: IntentInput[];
    builtIn?: boolean;
    _platform?: string;
};
export declare type Slot = {
    key: string;
    name: string;
    type: {
        value?: string;
    };
    color?: string;
    inputs: string[];
};
export declare type SlotMapping = {
    slot: Nullable<string>;
    variable: Nullable<Variable>;
};
export declare type CommandMapping = {
    slot: string;
    variable: Variable;
};
/**
 * @deprecated
 */
export declare type Command<T extends string = string, D extends AnyRecord = AnyRecord> = {
    type: T;
} & D;
export interface BaseCommand {
    type: string;
}
export declare type NodeID = string;
export declare type NodeType = string;
/**
 * @deprecated
 */
export declare type Node<T extends string = string, D extends AnyRecord = AnyRecord> = {
    id: string;
    type: T;
} & D;
export interface BaseNode {
    id: string;
    type: string;
}
export declare type CoordPoint = number;
export interface BaseDiagramNode<D extends AnyRecord = AnyRecord> {
    nodeID: NodeID;
    type: NodeType;
    coords?: [number, number];
    data: D;
}
export interface BlockOnlyData {
    name: string;
    color: string;
    steps: string[];
}
export interface BaseBlock<D extends AnyRecord = AnyRecord> extends BaseDiagramNode<D & BlockOnlyData> {
    coords: [number, number];
}
export interface BasePort<PD extends AnyRecord = AnyRecord> {
    type: string;
    target: Nullable<string>;
    data?: PD;
    id: string;
}
interface StepOnlyData<P = [BasePort, ...BasePort[]]> {
    ports: P;
}
export declare type BaseStep<D extends AnyRecord = AnyRecord, P = [BasePort, ...BasePort[]]> = BaseDiagramNode<D & StepOnlyData<P>>;
export declare type BasePlatformData = AnyRecord;
export declare type PrototypeModel = {
    slots: Slot[];
    intents: Intent[];
};
export {};
