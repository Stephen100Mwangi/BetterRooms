import type Fetch from "../fetch";
declare type Clazz<Client, Options = undefined> = Options extends undefined ? new (fetch: Fetch) => Client : new (fetch: Fetch, options: Options) => Client;
interface BaseFetcherOptions<Client, Options = undefined> {
    fetch: Fetch;
    clazz: Clazz<Client, Options>;
    endpoint: string;
}
export declare type FetcherOptions<Client, Options = undefined> = Options extends undefined ? BaseFetcherOptions<Client> & {
    clazzOptions?: never;
} : BaseFetcherOptions<Client, Options> & {
    clazzOptions: Options;
};
declare class Fetcher<Client, Options = undefined> {
    private readonly clazz;
    private endpoint;
    private clazzOptions;
    protected readonly fetch: Fetch;
    constructor({ fetch, clazz, endpoint, clazzOptions }: FetcherOptions<Client, Options>);
    protected _getEndpoint(): string;
    options(options: Parameters<Fetch['initWithOptions']>[0]): Client;
}
export default Fetcher;
