export declare type FetchConfig = {
    headers?: Record<string, string>;
};
declare type FetchOptions = {
    options?: FetchConfig;
    clientKey: string;
    apiEndpoint: string;
    authorization?: string;
};
declare type FetchReturnType<T> = {
    data: T;
    status: number;
};
export declare type PathVariables = Record<string, string | number>;
declare class Fetch {
    private axios;
    constructor({ options, clientKey, apiEndpoint, authorization }: FetchOptions);
    get<T extends unknown>(url: string): Promise<FetchReturnType<T>>;
    post<T extends unknown>(url: string, body?: unknown): Promise<FetchReturnType<T>>;
    put<T extends unknown>(url: string, body?: unknown): Promise<FetchReturnType<T>>;
    patch<T extends unknown>(url: string, body: unknown, query?: Record<string, string>): Promise<FetchReturnType<T>>;
    delete<T extends unknown>(url: string): Promise<FetchReturnType<T>>;
    /**
     * Updates the data by the provided path and value, variables can be used in the path
     * @example
     * // return Promise<number>
     * fetch.granularPatch<number>('/endpoint', 'vendors[$vendorID].skillID', 5678, { vendorID: "234" })
     */
    granularPatch<T extends unknown>(url: string, path: string, value?: T, pathVariables?: PathVariables): Promise<FetchReturnType<T>>;
    setOptions({ headers }: FetchConfig): void;
    initWithOptions({ headers }: FetchConfig): Fetch;
}
export default Fetch;
