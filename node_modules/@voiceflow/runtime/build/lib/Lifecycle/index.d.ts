import Runtime from '../Runtime';
import { CallbackEvent, Event, EventCallback, EventCallbackMap, EventType } from './types';
export { EventType, Event, EventCallbackMap, EventCallback, CallbackEvent };
declare class Lifecycle {
    private events;
    setEvent<K extends EventType>(type: K, callback: EventCallback<K>): void;
    getEvent<K extends EventType>(type: K): EventCallback<K> | undefined;
    callEvent<K extends EventType>(type: K, event: Event<K>, runtime: Runtime): Promise<void>;
}
export declare abstract class AbstractLifecycle {
    protected events: Lifecycle;
    constructor(events?: Lifecycle);
    setEvent<K extends EventType>(type: K, callback: EventCallback<K>): void;
    callEvent<K extends EventType>(type: K, event: Event<K>, runtime: Runtime): Promise<void>;
}
export default Lifecycle;
