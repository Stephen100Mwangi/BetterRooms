import * as s from 'superstruct';
import { Client } from "./client";
import { ClientOptions, PublicClient } from "./publicclient";
export { Client } from "./client";
export * from "./models";
export { PublicClient } from "./publicclient";
export { AnyRecord, ArrayElement, Flatten, Nullable, UnknownRecord } from "./types";
export declare const SParams: s.Struct<{
    clientKey: string;
    apiEndpoint: string;
}, {
    clientKey: s.Struct<string, any>;
    apiEndpoint: s.Struct<string, any>;
}>;
export declare type Options = Pick<ClientOptions, 'options' | 'analyticsEncryption'>;
export interface Params extends s.StructType<typeof SParams>, Options {
}
export declare const SGenerateClientParams: s.Struct<{
    authorization: string;
}, any>;
declare class ApiSDK {
    private clientKey;
    private apiEndpoint;
    constructor({ clientKey, apiEndpoint }: Params);
    generatePublicClient(options?: Options): PublicClient;
    generateClient(options: s.StructType<typeof SGenerateClientParams> & Options): Client;
}
export default ApiSDK;
