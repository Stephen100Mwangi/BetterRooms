import * as s from 'superstruct';
import { Member } from './member';
import { BasePlatformData } from './shared';
export declare enum ProjectPrototypeNLPType {
    LUIS = "LUIS"
}
export declare enum ProjectLinkType {
    CURVED = "CURVED",
    STRAIGHT = "STRAIGHT"
}
export declare const SProjectPrototypeLuis: s.Struct<{
    type: ProjectPrototypeNLPType;
    appID: string;
    resourceID?: string | undefined;
}, {
    type: s.Struct<ProjectPrototypeNLPType, any>;
    appID: s.Struct<string, any>;
    resourceID: s.Struct<string | undefined, any>;
}>;
export interface ProjectPrototypeNLPBase {
    type: string;
}
export interface ProjectPrototypeLuis extends ProjectPrototypeNLPBase, Omit<s.StructType<typeof SProjectPrototypeLuis>, 'type'> {
    type: ProjectPrototypeNLPType.LUIS;
}
export declare const SProjectPrototypeNLP: s.Struct<{
    type: ProjectPrototypeNLPType;
    appID: string;
    resourceID?: string | undefined;
}, any>;
export declare type ProjectPrototypeNLP = ProjectPrototypeLuis;
export declare const SProjectPrototype: s.Struct<{
    data: Record<string, unknown>;
    nlp?: {
        type: ProjectPrototypeNLPType;
        appID: string;
        resourceID?: string | undefined;
    } | undefined;
    trainedModel?: {
        slots: {
            key: string;
            name: string;
            inputs: string[];
            type: {
                value?: string | undefined;
            };
            color?: string | undefined;
        }[];
        intents: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                id: string;
                dialog: {
                    prompt: unknown[];
                    confirm: unknown[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                required: boolean;
            }[] | undefined;
            builtIn?: boolean | undefined;
            _platform?: string | undefined;
        }[];
    } | undefined;
    lastTrainedTime?: number | undefined;
}, {
    nlp: s.Struct<{
        type: ProjectPrototypeNLPType;
        appID: string;
        resourceID?: string | undefined;
    } | undefined, any>;
    data: s.Struct<Record<string, unknown>, any>;
    trainedModel: s.Struct<{
        slots: {
            key: string;
            name: string;
            inputs: string[];
            type: {
                value?: string | undefined;
            };
            color?: string | undefined;
        }[];
        intents: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                id: string;
                dialog: {
                    prompt: unknown[];
                    confirm: unknown[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                required: boolean;
            }[] | undefined;
            builtIn?: boolean | undefined;
            _platform?: string | undefined;
        }[];
    } | undefined, any>;
    lastTrainedTime: s.Struct<number | undefined, any>;
}>;
export interface ProjectPrototype extends Omit<s.StructType<typeof SProjectPrototype>, 'nlp'> {
    nlp?: ProjectPrototypeNLP;
}
export declare enum ProjectPrivacy {
    PUBLIC = "public",
    PRIVATE = "private"
}
export declare const SReportTag: s.Struct<{
    tagID: string;
    label: string;
}, {
    tagID: s.Struct<string, any>;
    label: s.Struct<string, any>;
}>;
export declare const SProject: s.Struct<{
    name: string;
    _id: string;
    creatorID: number;
    platformData: Record<string, unknown>;
    teamID: string;
    members: {
        creatorID: number;
        platformData: Record<string, unknown>;
    }[];
    platform: string;
    image?: string | undefined;
    privacy?: ProjectPrivacy | undefined;
    linkType?: ProjectLinkType | undefined;
    prototype?: {
        data: Record<string, unknown>;
        nlp?: {
            type: ProjectPrototypeNLPType;
            appID: string;
            resourceID?: string | undefined;
        } | undefined;
        trainedModel?: {
            slots: {
                key: string;
                name: string;
                inputs: string[];
                type: {
                    value?: string | undefined;
                };
                color?: string | undefined;
            }[];
            intents: {
                key: string;
                name: string;
                inputs: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                slots?: {
                    id: string;
                    dialog: {
                        prompt: unknown[];
                        confirm: unknown[];
                        utterances: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        confirmEnabled: boolean;
                    };
                    required: boolean;
                }[] | undefined;
                builtIn?: boolean | undefined;
                _platform?: string | undefined;
            }[];
        } | undefined;
        lastTrainedTime?: number | undefined;
    } | undefined;
    devVersion?: string | undefined;
    liveVersion?: string | undefined;
    reportTags?: Record<string, {
        tagID: string;
        label: string;
    }> | undefined;
}, {
    _id: s.Struct<string, any>;
    teamID: s.Struct<string, any>;
    creatorID: s.Struct<number, any>;
    name: s.Struct<string, any>;
    image: s.Struct<string | undefined, any>;
    members: s.Struct<{
        creatorID: number;
        platformData: Record<string, unknown>;
    }[], s.Struct<{
        creatorID: number;
        platformData: Record<string, unknown>;
    }, any>>;
    privacy: s.Struct<ProjectPrivacy | undefined, any>;
    platform: s.Struct<string, any>;
    linkType: s.Struct<ProjectLinkType | undefined, any>;
    prototype: s.Struct<{
        data: Record<string, unknown>;
        nlp?: {
            type: ProjectPrototypeNLPType;
            appID: string;
            resourceID?: string | undefined;
        } | undefined;
        trainedModel?: {
            slots: {
                key: string;
                name: string;
                inputs: string[];
                type: {
                    value?: string | undefined;
                };
                color?: string | undefined;
            }[];
            intents: {
                key: string;
                name: string;
                inputs: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                slots?: {
                    id: string;
                    dialog: {
                        prompt: unknown[];
                        confirm: unknown[];
                        utterances: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        confirmEnabled: boolean;
                    };
                    required: boolean;
                }[] | undefined;
                builtIn?: boolean | undefined;
                _platform?: string | undefined;
            }[];
        } | undefined;
        lastTrainedTime?: number | undefined;
    } | undefined, any>;
    devVersion: s.Struct<string | undefined, any>;
    liveVersion: s.Struct<string | undefined, any>;
    platformData: s.Struct<Record<string, unknown>, any>;
    reportTags: s.Struct<Record<string, {
        tagID: string;
        label: string;
    }> | undefined, any>;
}>;
export interface Project<P extends BasePlatformData, M extends BasePlatformData> extends Omit<s.StructType<typeof SProject>, 'platformData' | 'members'> {
    members: Member<M>[];
    platformData: P;
}
