"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pino_1 = __importDefault(require("@voiceflow/pino"));
const cls_hooked_1 = require("cls-hooked");
const nanoid_1 = require("nanoid");
const createMiddleware_1 = __importDefault(require("./createMiddleware"));
const TRACED_DATA = 'traced-data';
const DEFAULT_TRACE_LENGTH = 10;
const namespace = cls_hooked_1.createNamespace('@voiceflow/logger');
const createTraced = ({ options, verbosity, traceIDLength = DEFAULT_TRACE_LENGTH, }) => {
    const setTracedData = (data) => namespace.set(TRACED_DATA, data);
    const getTracedData = () => namespace.get(TRACED_DATA);
    const logger = pino_1.default(options);
    const proxifiedLogger = new Proxy(logger, {
        get: (target, property, receiver) => { var _a; return Reflect.get(((_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.logger) || target, property, receiver); },
        has: (target, key) => { var _a; return Reflect.has(((_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.logger) || target, key); },
        apply: (target, thisArg, args) => { var _a; return Reflect.apply((((_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.logger) || target), thisArg, args); },
        ownKeys: (target) => { var _a; return Reflect.ownKeys(((_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.logger) || target); },
        construct: (target, args) => { var _a; return Reflect.construct((((_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.logger) || target), args); },
        getOwnPropertyDescriptor: (target, key) => { var _a; return Reflect.getOwnPropertyDescriptor(((_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.logger) || target, key); },
    });
    const middleware = createMiddleware_1.default({
        logger: proxifiedLogger,
        verbosity,
        genReqId: () => { var _a, _b; return (_b = (_a = getTracedData()) === null || _a === void 0 ? void 0 : _a.traceID) !== null && _b !== void 0 ? _b : nanoid_1.nanoid(traceIDLength); },
    });
    const tracedMiddleware = (req, res, next) => {
        namespace.bindEmitter(req);
        namespace.bindEmitter(res);
        const traceID = nanoid_1.nanoid(traceIDLength);
        const tracedLogger = logger.child({ traceID });
        namespace.run(() => {
            setTracedData({ traceID, logger: tracedLogger });
            middleware(req, res, next);
        });
    };
    return {
        logger: proxifiedLogger,
        middleware: tracedMiddleware,
    };
};
exports.default = createTraced;
//# sourceMappingURL=createTraced.js.map