"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetcher_1 = __importDefault(require("./fetcher"));
const ENDPOINT = 'analytics';
const ENCRYPTED_ENDPOINT = 'vf-ping';
class Analytics extends fetcher_1.default {
    constructor(fetch, options = {}) {
        super({ fetch, clazz: Analytics, endpoint: ENDPOINT, clazzOptions: options });
        this.encryption = options.encryption;
    }
    get shouldEncrypt() {
        return !!this.encryption;
    }
    encryptedPayload(data) {
        if (!this.encryption) {
            throw new Error('Encryption should be provided!');
        }
        return { message: this.encryption.encryptJSON(data) };
    }
    _getEndpoint() {
        return this.shouldEncrypt ? ENCRYPTED_ENDPOINT : ENDPOINT;
    }
    async track(event, { envIDs, hashed, teamhashed, properties = {} } = {}) {
        const payload = { event, envIDs, hashed, teamhashed, properties };
        if (this.shouldEncrypt) {
            await this.fetch.post(`${this._getEndpoint()}`, this.encryptedPayload(payload));
        }
        else {
            await this.fetch.post(`${this._getEndpoint()}/track`, payload);
        }
    }
    async identify({ envIDs, traits, hashed, teamhashed, }) {
        const payload = { traits, envIDs, hashed, teamhashed };
        if (this.shouldEncrypt) {
            await this.fetch.post(`${this._getEndpoint()}/user`, this.encryptedPayload(payload));
        }
        else {
            await this.fetch.post(`${this._getEndpoint()}/identify`, payload);
        }
    }
    async identifyWorkspace(id, properties) {
        const payload = Object.assign(Object.assign({}, properties), { id });
        if (this.shouldEncrypt) {
            await this.fetch.post(`${this._getEndpoint()}/workspace`, this.encryptedPayload(payload));
        }
        else {
            await this.fetch.post(`${this._getEndpoint()}/workspace/identify`, payload);
        }
    }
}
exports.default = Analytics;
//# sourceMappingURL=analytics.js.map