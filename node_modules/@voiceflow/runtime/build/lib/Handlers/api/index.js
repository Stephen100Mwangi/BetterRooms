"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@voiceflow/common");
const general_types_1 = require("@voiceflow/general-types");
const axios_1 = __importDefault(require("axios"));
const lodash_1 = __importDefault(require("lodash"));
const safe_json_stringify_1 = __importDefault(require("safe-json-stringify"));
const utils_1 = require("./utils");
const APIHandler = ({ customAPIEndpoint } = {}) => ({
    canHandle: (node) => node.type === general_types_1.NodeType.INTEGRATIONS && node.selected_integration === general_types_1.IntegrationType.CUSTOM_API,
    handle: async (node, runtime, variables) => {
        var _a, _b, _c, _d;
        let nextId = null;
        try {
            const actionBodyData = common_1.deepVariableSubstitution(lodash_1.default.cloneDeep(node.action_data), variables.getState());
            const data = customAPIEndpoint
                ? (await axios_1.default.post(`${customAPIEndpoint}/custom/make_api_call`, actionBodyData)).data
                : // make the call locally if no service
                    await utils_1.makeAPICall(actionBodyData);
            // add mapped variables to variables store
            variables.merge(data.variables);
            // if custom api returned error http status nextId to fail port, otherwise success
            if (data.response.status >= 400) {
                runtime.trace.debug(`API call returned status code ${data.response.status}`);
                nextId = (_a = node.fail_id) !== null && _a !== void 0 ? _a : null;
            }
            else {
                runtime.trace.debug('API call successfully triggered');
                nextId = (_b = node.success_id) !== null && _b !== void 0 ? _b : null;
            }
        }
        catch (error) {
            runtime.trace.debug(`API call failed - Error: \n${safe_json_stringify_1.default(((_c = error.response) === null || _c === void 0 ? void 0 : _c.data) || error)}`);
            nextId = (_d = node.fail_id) !== null && _d !== void 0 ? _d : null;
        }
        return nextId;
    },
});
exports.default = APIHandler;
//# sourceMappingURL=index.js.map