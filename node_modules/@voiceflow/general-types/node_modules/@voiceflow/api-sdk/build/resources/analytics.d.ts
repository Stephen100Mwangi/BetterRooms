import { Crypto } from '@voiceflow/common';
import type Fetch from "../fetch";
import Fetcher from './fetcher';
interface HashOptions<K> {
    envIDs?: K[];
    hashed?: K[];
    teamhashed?: K[];
}
interface TrackOptions<P extends Record<string, any>, K extends keyof P> extends HashOptions<K> {
    properties?: P;
}
interface IdentifyOptions<T extends Record<string, any>, K extends keyof T> extends HashOptions<K> {
    traits: T;
}
interface AnalyticsOptions {
    encryption?: Crypto.Synchronous;
}
declare class Analytics extends Fetcher<Analytics, AnalyticsOptions> {
    private encryption?;
    constructor(fetch: Fetch, options?: AnalyticsOptions);
    private get shouldEncrypt();
    private encryptedPayload;
    protected _getEndpoint(): string;
    track<P extends Record<string, any>, K extends keyof P>(event: string, { envIDs, hashed, teamhashed, properties }?: TrackOptions<P, K>): Promise<void>;
    identify<T extends Record<string, any>, K extends keyof T>({ envIDs, traits, hashed, teamhashed, }: IdentifyOptions<T, K>): Promise<void>;
    identifyWorkspace<T extends {
        name: string;
    }>(id: string, properties: T): Promise<void>;
}
export default Analytics;
