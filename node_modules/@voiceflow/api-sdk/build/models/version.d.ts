import * as s from 'superstruct';
import { UnknownRecord } from "../types";
import { Command } from './shared';
export declare const SVersionPlatformDataSettings: s.Struct<Record<string, unknown>, any>;
export declare const SVersionPlatformDataPublishing: s.Struct<Record<string, unknown>, any>;
export declare const SVersionPlatformData: s.Struct<Record<string, any> & {
    slots: {
        type: {
            value?: string | undefined;
        };
        key: string;
        name: string;
        inputs: string[];
        color?: string | undefined;
    }[];
    intents: {
        key: string;
        name: string;
        inputs: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        slots?: {
            required: boolean;
            dialog: {
                prompt: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirm: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                utterances: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirmEnabled: boolean;
            };
            id: string;
        }[] | undefined;
        builtIn?: boolean | undefined;
    }[];
    settings: Record<string, unknown>;
    publishing: Record<string, unknown>;
}, {
    slots: s.Struct<{
        type: {
            value?: string | undefined;
        };
        key: string;
        name: string;
        inputs: string[];
        color?: string | undefined;
    }[], s.Struct<{
        type: {
            value?: string | undefined;
        };
        key: string;
        name: string;
        inputs: string[];
        color?: string | undefined;
    }, any>>;
    intents: s.Struct<{
        key: string;
        name: string;
        inputs: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        slots?: {
            required: boolean;
            dialog: {
                prompt: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirm: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                utterances: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirmEnabled: boolean;
            };
            id: string;
        }[] | undefined;
        builtIn?: boolean | undefined;
    }[], s.Struct<{
        key: string;
        name: string;
        inputs: {
            text: string;
            slots?: string[] | undefined;
            voice?: string | undefined;
        }[];
        slots?: {
            required: boolean;
            dialog: {
                prompt: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirm: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                utterances: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                confirmEnabled: boolean;
            };
            id: string;
        }[] | undefined;
        builtIn?: boolean | undefined;
    }, any>>;
    settings: s.Struct<Record<string, unknown>, any>;
    publishing: s.Struct<Record<string, unknown>, any>;
}>;
export declare type StrictVersionPlatformData<S extends UnknownRecord = UnknownRecord, P extends UnknownRecord = UnknownRecord> = Pick<s.StructType<typeof SVersionPlatformData>, 'slots' | 'intents'> & {
    settings: S;
    publishing: P;
};
export declare type VersionPlatformData<S extends UnknownRecord = UnknownRecord, P extends UnknownRecord = UnknownRecord> = UnknownRecord & StrictVersionPlatformData<S, P>;
export declare const SVersionPrototypeStackFrame: s.Struct<{
    programID: string;
    storage?: Record<string, unknown> | undefined;
    nodeID?: string | null | undefined;
    commands?: (Record<string, any> & {
        type: string;
    })[] | undefined;
    variables?: Record<string, unknown> | undefined;
}, {
    nodeID: s.Struct<string | null | undefined, any>;
    programID: s.Struct<string, any>;
    storage: s.Struct<Record<string, unknown> | undefined, any>;
    commands: s.Struct<(Record<string, any> & {
        type: string;
    })[] | undefined, any>;
    variables: s.Struct<Record<string, unknown> | undefined, any>;
}>;
export declare type VersionPrototypeStackFrame<C extends Command = Command> = Omit<s.StructType<typeof SVersionPrototypeStackFrame>, 'commands'> & {
    commands?: C[];
};
export declare const SVersionPrototypeContext: s.Struct<{
    turn?: Record<string, unknown> | undefined;
    stack?: {
        programID: string;
        storage?: Record<string, unknown> | undefined;
        nodeID?: string | null | undefined;
        commands?: (Record<string, any> & {
            type: string;
        })[] | undefined;
        variables?: Record<string, unknown> | undefined;
    }[] | undefined;
    storage?: Record<string, unknown> | undefined;
    variables?: Record<string, unknown> | undefined;
}, any>;
export declare type VersionPrototypeContext<C extends Command = Command> = Omit<s.StructType<typeof SVersionPrototypeContext>, 'stack'> & {
    stack?: VersionPrototypeStackFrame<C>[];
};
export declare const SVersionPrototypeData: s.Struct<{
    name: string;
    locales: string[];
}, {
    name: s.Struct<string, any>;
    locales: s.Struct<string[], s.Struct<string, any>>;
}>;
export declare type VersionPrototypeData<L extends string> = Omit<s.StructType<typeof SVersionPrototypeData>, 'locales'> & {
    locales: L[];
};
export declare const SVersionPrototypeSettings: s.Struct<{
    password?: string | undefined;
    layout?: string | undefined;
    brandColor?: string | undefined;
    brandImage?: string | undefined;
    avatar?: string | undefined;
    hasPassword?: boolean | undefined;
}, {
    layout: s.Struct<string | undefined, any>;
    brandColor: s.Struct<string | undefined, any>;
    brandImage: s.Struct<string | undefined, any>;
    avatar: s.Struct<string | undefined, any>;
    password: s.Struct<string | undefined, any>;
    hasPassword: s.Struct<boolean | undefined, any>;
}>;
export declare const SVersionPrototype: s.Struct<{
    data: {
        name: string;
        locales: string[];
    };
    settings: {
        password?: string | undefined;
        layout?: string | undefined;
        brandColor?: string | undefined;
        brandImage?: string | undefined;
        avatar?: string | undefined;
        hasPassword?: boolean | undefined;
    };
    model: {
        slots: {
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }[];
        intents: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }[];
    };
    context: {
        turn?: Record<string, unknown> | undefined;
        stack?: {
            programID: string;
            storage?: Record<string, unknown> | undefined;
            nodeID?: string | null | undefined;
            commands?: (Record<string, any> & {
                type: string;
            })[] | undefined;
            variables?: Record<string, unknown> | undefined;
        }[] | undefined;
        storage?: Record<string, unknown> | undefined;
        variables?: Record<string, unknown> | undefined;
    };
}, {
    data: s.Struct<{
        name: string;
        locales: string[];
    }, {
        name: s.Struct<string, any>;
        locales: s.Struct<string[], s.Struct<string, any>>;
    }>;
    model: s.Struct<{
        slots: {
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }[];
        intents: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }[];
    }, {
        slots: s.Struct<{
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }[], s.Struct<{
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }, any>>;
        intents: s.Struct<{
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }[], s.Struct<{
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }, any>>;
    }>;
    context: s.Struct<{
        turn?: Record<string, unknown> | undefined;
        stack?: {
            programID: string;
            storage?: Record<string, unknown> | undefined;
            nodeID?: string | null | undefined;
            commands?: (Record<string, any> & {
                type: string;
            })[] | undefined;
            variables?: Record<string, unknown> | undefined;
        }[] | undefined;
        storage?: Record<string, unknown> | undefined;
        variables?: Record<string, unknown> | undefined;
    }, any>;
    settings: s.Struct<{
        password?: string | undefined;
        layout?: string | undefined;
        brandColor?: string | undefined;
        brandImage?: string | undefined;
        avatar?: string | undefined;
        hasPassword?: boolean | undefined;
    }, {
        layout: s.Struct<string | undefined, any>;
        brandColor: s.Struct<string | undefined, any>;
        brandImage: s.Struct<string | undefined, any>;
        avatar: s.Struct<string | undefined, any>;
        password: s.Struct<string | undefined, any>;
        hasPassword: s.Struct<boolean | undefined, any>;
    }>;
}>;
export declare type VersionPrototype<C extends Command = Command, L extends string = string> = Omit<s.StructType<typeof SVersionPrototype>, 'context' | 'data'> & {
    data: VersionPrototypeData<L>;
    context: VersionPrototypeContext<C>;
};
export declare const SVersion: s.Struct<{
    name: string;
    creatorID: number;
    platformData: Record<string, any> & {
        slots: {
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }[];
        intents: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }[];
        settings: Record<string, unknown>;
        publishing: Record<string, unknown>;
    };
    _id: string;
    variables: string[];
    projectID: string;
    rootDiagramID: string;
    prototype?: {
        data: {
            name: string;
            locales: string[];
        };
        settings: {
            password?: string | undefined;
            layout?: string | undefined;
            brandColor?: string | undefined;
            brandImage?: string | undefined;
            avatar?: string | undefined;
            hasPassword?: boolean | undefined;
        };
        model: {
            slots: {
                type: {
                    value?: string | undefined;
                };
                key: string;
                name: string;
                inputs: string[];
                color?: string | undefined;
            }[];
            intents: {
                key: string;
                name: string;
                inputs: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                slots?: {
                    required: boolean;
                    dialog: {
                        prompt: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        confirm: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        utterances: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        confirmEnabled: boolean;
                    };
                    id: string;
                }[] | undefined;
                builtIn?: boolean | undefined;
            }[];
        };
        context: {
            turn?: Record<string, unknown> | undefined;
            stack?: {
                programID: string;
                storage?: Record<string, unknown> | undefined;
                nodeID?: string | null | undefined;
                commands?: (Record<string, any> & {
                    type: string;
                })[] | undefined;
                variables?: Record<string, unknown> | undefined;
            }[] | undefined;
            storage?: Record<string, unknown> | undefined;
            variables?: Record<string, unknown> | undefined;
        };
    } | undefined;
}, {
    _id: s.Struct<string, any>;
    creatorID: s.Struct<number, any>;
    projectID: s.Struct<string, any>;
    name: s.Struct<string, any>;
    variables: s.Struct<string[], s.Struct<string, any>>;
    prototype: s.Struct<{
        data: {
            name: string;
            locales: string[];
        };
        settings: {
            password?: string | undefined;
            layout?: string | undefined;
            brandColor?: string | undefined;
            brandImage?: string | undefined;
            avatar?: string | undefined;
            hasPassword?: boolean | undefined;
        };
        model: {
            slots: {
                type: {
                    value?: string | undefined;
                };
                key: string;
                name: string;
                inputs: string[];
                color?: string | undefined;
            }[];
            intents: {
                key: string;
                name: string;
                inputs: {
                    text: string;
                    slots?: string[] | undefined;
                    voice?: string | undefined;
                }[];
                slots?: {
                    required: boolean;
                    dialog: {
                        prompt: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        confirm: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        utterances: {
                            text: string;
                            slots?: string[] | undefined;
                            voice?: string | undefined;
                        }[];
                        confirmEnabled: boolean;
                    };
                    id: string;
                }[] | undefined;
                builtIn?: boolean | undefined;
            }[];
        };
        context: {
            turn?: Record<string, unknown> | undefined;
            stack?: {
                programID: string;
                storage?: Record<string, unknown> | undefined;
                nodeID?: string | null | undefined;
                commands?: (Record<string, any> & {
                    type: string;
                })[] | undefined;
                variables?: Record<string, unknown> | undefined;
            }[] | undefined;
            storage?: Record<string, unknown> | undefined;
            variables?: Record<string, unknown> | undefined;
        };
    } | undefined, any>;
    platformData: s.Struct<Record<string, any> & {
        slots: {
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }[];
        intents: {
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }[];
        settings: Record<string, unknown>;
        publishing: Record<string, unknown>;
    }, {
        slots: s.Struct<{
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }[], s.Struct<{
            type: {
                value?: string | undefined;
            };
            key: string;
            name: string;
            inputs: string[];
            color?: string | undefined;
        }, any>>;
        intents: s.Struct<{
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }[], s.Struct<{
            key: string;
            name: string;
            inputs: {
                text: string;
                slots?: string[] | undefined;
                voice?: string | undefined;
            }[];
            slots?: {
                required: boolean;
                dialog: {
                    prompt: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirm: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    utterances: {
                        text: string;
                        slots?: string[] | undefined;
                        voice?: string | undefined;
                    }[];
                    confirmEnabled: boolean;
                };
                id: string;
            }[] | undefined;
            builtIn?: boolean | undefined;
        }, any>>;
        settings: s.Struct<Record<string, unknown>, any>;
        publishing: s.Struct<Record<string, unknown>, any>;
    }>;
    rootDiagramID: s.Struct<string, any>;
}>;
export declare type Version<P extends VersionPlatformData, C extends Command = Command, L extends string = string> = Omit<s.StructType<typeof SVersion>, 'prototype' | 'platformData'> & {
    prototype?: VersionPrototype<C, L>;
    platformData: P;
};
