import type Fetch from "../../fetch";
import { BasePlatformData, Project, ProjectID, ProjectPrototype, SProject, Version, VersionPlatformData, WorkspaceID } from "../../models";
import { Fields } from '../base';
import CrudResource from '../crud';
import MemberResource from './member';
export declare const modelIDKey = "_id";
export declare type ModelIDKey = typeof modelIDKey;
declare class ProjectResource extends CrudResource<typeof SProject['schema'], ModelIDKey, ProjectResource, 'creatorID'> {
    member: MemberResource;
    constructor(fetch: Fetch);
    list<P extends Partial<Project<BasePlatformData, BasePlatformData>>>(workspaceID: WorkspaceID, fields: Fields): Promise<P[]>;
    list<P extends BasePlatformData, M extends BasePlatformData>(workspaceID: WorkspaceID): Promise<Project<P, M>[]>;
    list<P extends Project<any, any> = Project<BasePlatformData, BasePlatformData>>(workspaceID: WorkspaceID): Promise<P[]>;
    get<P extends Partial<Project<BasePlatformData, BasePlatformData>>>(id: ProjectID, fields: string[]): Promise<P>;
    get<P extends BasePlatformData, M extends BasePlatformData>(id: ProjectID): Promise<Project<P, M>>;
    get<P extends Project<any, any> = Project<BasePlatformData, BasePlatformData>>(id: ProjectID): Promise<P>;
    create<P extends BasePlatformData, M extends BasePlatformData>(body: Omit<Project<P, M>, ModelIDKey | 'creatorID'>): Promise<Project<P, M>>;
    create<P extends Omit<Project<any, any>, ModelIDKey | 'creatorID'>>(body: P): Promise<P & Pick<Project<any, any>, ModelIDKey | 'creatorID'>>;
    update<P extends BasePlatformData, M extends BasePlatformData>(id: ProjectID, body: Partial<Project<P, M>>): Promise<Partial<Project<P, M>>>;
    update<P extends Partial<Project<any, any>>>(id: ProjectID, body: P): Promise<P>;
    delete(id: ProjectID): Promise<ProjectID>;
    updatePlatformData<P extends Partial<BasePlatformData>>(id: ProjectID, body: P): Promise<P>;
    getVersions<P extends Partial<Version<VersionPlatformData>>>(id: ProjectID, fields: string[]): Promise<P[]>;
    getVersions<P extends Version<any> = Version<VersionPlatformData>>(id: ProjectID): Promise<P[]>;
    getVersions<P extends VersionPlatformData>(id: ProjectID): Promise<Version<P>[]>;
    getPrototype<P extends ProjectPrototype>(id: ProjectID): Promise<P>;
}
export default ProjectResource;
