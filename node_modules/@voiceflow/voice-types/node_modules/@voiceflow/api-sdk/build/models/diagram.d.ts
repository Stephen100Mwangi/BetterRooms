import * as s from 'superstruct';
import { BaseDiagramNode, NodeID } from './shared';
export declare enum DiagramType {
    TOPIC = "TOPIC",
    GROUP = "GROUP",
    COMPONENT = "COMPONENT"
}
export declare const SDiagramType: s.Struct<DiagramType, any>;
export declare const SDiagram: s.Struct<{
    name: string;
    _id: string;
    creatorID: number;
    versionID: string;
    variables: string[];
    offsetX: number;
    offsetY: number;
    zoom: number;
    nodes: Record<string, {
        data: Record<string, unknown>;
        type: string;
        nodeID: string;
        coords?: [number, number] | undefined;
    }>;
    children: string[];
    modified: number;
    type?: DiagramType | undefined;
    intentStepIDs?: string[] | undefined;
}, {
    _id: s.Struct<string, any>;
    name: s.Struct<string, any>;
    type: s.Struct<DiagramType | undefined, any>;
    versionID: s.Struct<string, any>;
    creatorID: s.Struct<number, any>;
    variables: s.Struct<string[], s.Struct<string, any>>;
    offsetX: s.Struct<number, any>;
    offsetY: s.Struct<number, any>;
    zoom: s.Struct<number, any>;
    nodes: s.Struct<Record<string, {
        data: Record<string, unknown>;
        type: string;
        nodeID: string;
        coords?: [number, number] | undefined;
    }>, any>;
    intentStepIDs: s.Struct<string[] | undefined, any>;
    children: s.Struct<string[], s.Struct<string, any>>;
    modified: s.Struct<number, any>;
}>;
export interface Diagram<N extends BaseDiagramNode = BaseDiagramNode> extends Omit<s.StructType<typeof SDiagram>, 'nodes'> {
    nodes: Record<NodeID, N>;
}
